// /node_modules/nuxt/dist/app/composables/state.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("vue", {"importedNames":["isRef","toRef"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["useNuxtApp"]});
const __vite_ssr_import_2__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/utils.js", {"importedNames":["toArray"]});
const useStateKeyPrefix = "$s";
function useState(...args) {
  const autoKey = typeof args[args.length - 1] === "string" ? args.pop() : void 0;
  if (typeof args[0] !== "string") {
    args.unshift(autoKey);
  };
  const [_key, init] = args;
  if (!_key || typeof _key !== "string") {
    throw new TypeError("[nuxt] [useState] key must be a string: " + _key);
  };
  if (init !== void 0 && typeof init !== "function") {
    throw new Error("[nuxt] [useState] init must be a function: " + init);
  };
  const key = useStateKeyPrefix + _key;
  const nuxtApp = (0,__vite_ssr_import_1__.useNuxtApp)();
  const state = (0,__vite_ssr_import_0__.toRef)(nuxtApp.payload.state, key);
  if (state.value === void 0 && init) {
    const initialValue = init();
    if ((0,__vite_ssr_import_0__.isRef)(initialValue)) {
      nuxtApp.payload.state[key] = initialValue;
      return initialValue;
    };
    state.value = initialValue;
  };
  return state;
}
Object.defineProperty(__vite_ssr_exports__, "useState", { enumerable: true, configurable: true, get(){ return useState }});;
function clearNuxtState(keys) {
  const nuxtApp = (0,__vite_ssr_import_1__.useNuxtApp)();
  const _allKeys = Object.keys(nuxtApp.payload.state).map((key) => key.substring(useStateKeyPrefix.length));
  const _keys = !keys ? _allKeys : typeof keys === "function" ? _allKeys.filter(keys) : (0,__vite_ssr_import_2__.toArray)(keys);
  for (const _key of _keys) {
    const key = useStateKeyPrefix + _key;
    if (key in nuxtApp.payload.state) {
      nuxtApp.payload.state[key] = void 0;
    }
  }
}
Object.defineProperty(__vite_ssr_exports__, "clearNuxtState", { enumerable: true, configurable: true, get(){ return clearNuxtState }});

// /node_modules/nuxt/dist/app/middleware/manifest-route-rule.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("/node_modules/unctx/dist/index.mjs", {"importedNames":["executeAsync"]});const __vite_ssr_import_1__ = await __vite_ssr_import__("ufo", {"importedNames":["hasProtocol"]});const __vite_ssr_import_2__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/router.js", {"importedNames":["defineNuxtRouteMiddleware"]});const __vite_ssr_import_3__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/manifest.js", {"importedNames":["getRouteRules"]});/* _processed_nuxt_unctx_transform */



__vite_ssr_exports__.default = (0,__vite_ssr_import_2__.defineNuxtRouteMiddleware)(async (to) => {let __temp, __restore;
  if (true) {
    return;
  };
  const rules = (([__temp,__restore]=(0,__vite_ssr_import_0__.executeAsync)(()=>(0,__vite_ssr_import_3__.getRouteRules)({ path: to.path }))),__temp=await __temp,__restore(),__temp);
  if (rules.redirect) {
    if ((0,__vite_ssr_import_1__.hasProtocol)(rules.redirect, { acceptRelative: true })) {
      (void 0).location.href = rules.redirect;
      return false;
    };
    return rules.redirect;
  }
},1);

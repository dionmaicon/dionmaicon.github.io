// /node_modules/nuxt/dist/app/composables/payload.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("ufo", {"importedNames":["hasProtocol","joinURL","withoutTrailingSlash"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("devalue", {"importedNames":["parse"]});
const __vite_ssr_import_2__ = await __vite_ssr_import__("/node_modules/@unhead/vue/dist/index.mjs", {"importedNames":["useHead"]});
const __vite_ssr_import_3__ = await __vite_ssr_import__("vue", {"importedNames":["getCurrentInstance","onServerPrefetch","reactive"]});
const __vite_ssr_import_4__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["useNuxtApp","useRuntimeConfig"]});
const __vite_ssr_import_5__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/router.js", {"importedNames":["useRoute"]});
const __vite_ssr_import_6__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/manifest.js", {"importedNames":["getAppManifest","getRouteRules"]});
const __vite_ssr_import_7__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fnuxt.config.mjs", {"importedNames":["appId","appManifest","multiApp","payloadExtraction","renderJsonPayloads"]});
async function loadPayload(url, opts = {}) {
  if (true) {
    return null;
  };
  const payloadURL = await _getPayloadURL(url, opts);
  const nuxtApp = (0,__vite_ssr_import_4__.useNuxtApp)();
  const cache = nuxtApp._payloadCache = nuxtApp._payloadCache || {};
  if (payloadURL in cache) {
    return cache[payloadURL] || null;
  };
  cache[payloadURL] = isPrerendered(url).then((prerendered) => {
    if (!prerendered) {
      cache[payloadURL] = null;
      return null;
    };
    return _importPayload(payloadURL).then((payload) => {
      if (payload) {
        return payload;
      };
      delete cache[payloadURL];
      return null;
    });
  });
  return cache[payloadURL];
}
Object.defineProperty(__vite_ssr_exports__, "loadPayload", { enumerable: true, configurable: true, get(){ return loadPayload }});;
function preloadPayload(url, opts = {}) {
  const nuxtApp = (0,__vite_ssr_import_4__.useNuxtApp)();
  const promise = _getPayloadURL(url, opts).then((payloadURL) => {
    nuxtApp.runWithContext(() => (0,__vite_ssr_import_2__.useHead)({
      link: [
        { rel: "modulepreload", href: payloadURL }
      ]
    }));
  });
  if (true) {
    (0,__vite_ssr_import_3__.onServerPrefetch)(() => promise);
  };
  return promise;
}
Object.defineProperty(__vite_ssr_exports__, "preloadPayload", { enumerable: true, configurable: true, get(){ return preloadPayload }});;
const filename = __vite_ssr_import_7__.renderJsonPayloads ? "_payload.json" : "_payload.js";
async function _getPayloadURL(url, opts = {}) {
  const u = new URL(url, "http://localhost");
  if (u.host !== "localhost" || (0,__vite_ssr_import_0__.hasProtocol)(u.pathname, { acceptRelative: true })) {
    throw new Error("Payload URL must not include hostname: " + url);
  };
  const config = (0,__vite_ssr_import_4__.useRuntimeConfig)();
  const hash = opts.hash || (opts.fresh ? Date.now() : config.app.buildId);
  const cdnURL = config.app.cdnURL;
  const baseOrCdnURL = cdnURL && await isPrerendered(url) ? cdnURL : config.app.baseURL;
  return (0,__vite_ssr_import_0__.joinURL)(baseOrCdnURL, u.pathname, filename + (hash ? `?${hash}` : ""));
}
async function _importPayload(payloadURL) {
  if (true) {
    return null;
  };
  const payloadPromise = __vite_ssr_import_7__.renderJsonPayloads ? fetch(payloadURL).then((res) => res.text().then(parsePayload)) : __vite_ssr_dynamic_import__(
    /* webpackIgnore: true */
    /* @vite-ignore */
    payloadURL
  ).then((r) => r.default || r);
  try {
    return await payloadPromise;
  } catch (err) {
    console.warn("[nuxt] Cannot load payload ", payloadURL, err);
  };
  return null;
}
async function isPrerendered(url = (0,__vite_ssr_import_5__.useRoute)().path) {
  const nuxtApp = (0,__vite_ssr_import_4__.useNuxtApp)();
  if (!__vite_ssr_import_7__.appManifest) {
    return !!nuxtApp.payload.prerenderedAt;
  };
  url = (0,__vite_ssr_import_0__.withoutTrailingSlash)(url);
  const manifest = await (0,__vite_ssr_import_6__.getAppManifest)();
  if (manifest.prerendered.includes(url)) {
    return true;
  };
  return nuxtApp.runWithContext(async () => {
    const rules = await (0,__vite_ssr_import_6__.getRouteRules)({ path: url });
    return !!rules.prerender && !rules.redirect;
  });
}
Object.defineProperty(__vite_ssr_exports__, "isPrerendered", { enumerable: true, configurable: true, get(){ return isPrerendered }});;
let payloadCache = null;
async function getNuxtClientPayload() {
  if (true) {
    return null;
  };
  if (payloadCache) {
    return payloadCache;
  };
  const el = __vite_ssr_import_7__.multiApp ? (void 0).querySelector(`[data-nuxt-data="${__vite_ssr_import_7__.appId}"]`) : (void 0).getElementById("__NUXT_DATA__");
  if (!el) {
    return {};
  };
  const inlineData = await parsePayload(el.textContent || "");
  const externalData = el.dataset.src ? await _importPayload(el.dataset.src) : void 0;
  payloadCache = {
    ...inlineData,
    ...externalData,
    ...__vite_ssr_import_7__.multiApp ? (void 0).__NUXT__?.[__vite_ssr_import_7__.appId] : (void 0).__NUXT__
  };
  if (payloadCache.config?.public) {
    payloadCache.config.public = (0,__vite_ssr_import_3__.reactive)(payloadCache.config.public);
  };
  return payloadCache;
}
Object.defineProperty(__vite_ssr_exports__, "getNuxtClientPayload", { enumerable: true, configurable: true, get(){ return getNuxtClientPayload }});;
async function parsePayload(payload) {
  return await (0,__vite_ssr_import_1__.parse)(payload, (0,__vite_ssr_import_4__.useNuxtApp)()._payloadRevivers);
}
Object.defineProperty(__vite_ssr_exports__, "parsePayload", { enumerable: true, configurable: true, get(){ return parsePayload }});;
function definePayloadReducer(name, reduce) {
  if (true) {
    (0,__vite_ssr_import_4__.useNuxtApp)().ssrContext._payloadReducers[name] = reduce;
  }
}
Object.defineProperty(__vite_ssr_exports__, "definePayloadReducer", { enumerable: true, configurable: true, get(){ return definePayloadReducer }});;
function definePayloadReviver(name, revive) {
  if ((0,__vite_ssr_import_3__.getCurrentInstance)()) {
    console.warn("[nuxt] [definePayloadReviver] This function must be called in a Nuxt plugin that is `unshift`ed to the beginning of the Nuxt plugins array.");
  };
  if (false) {
    (0,__vite_ssr_import_4__.useNuxtApp)()._payloadRevivers[name] = revive;
  }
}
Object.defineProperty(__vite_ssr_exports__, "definePayloadReviver", { enumerable: true, configurable: true, get(){ return definePayloadReviver }});

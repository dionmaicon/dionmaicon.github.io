// /node_modules/nuxt/dist/app/compat/idle-callback.js
const requestIdleCallback = true ? () => {
} : globalThis.requestIdleCallback || ((cb) => {
  const start = Date.now();
  const idleDeadline = {
    didTimeout: false,
    timeRemaining: () => Math.max(0, 50 - (Date.now() - start))
  };
  return setTimeout(() => {
    cb(idleDeadline);
  }, 1);
});
Object.defineProperty(__vite_ssr_exports__, "requestIdleCallback", { enumerable: true, configurable: true, get(){ return requestIdleCallback }});
const cancelIdleCallback = true ? () => {
} : globalThis.cancelIdleCallback || ((id) => {
  clearTimeout(id);
});
Object.defineProperty(__vite_ssr_exports__, "cancelIdleCallback", { enumerable: true, configurable: true, get(){ return cancelIdleCallback }});

// /node_modules/nuxt/dist/app/composables/ssr.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("h3", {"importedNames":["setResponseStatus","appendHeader","getRequestHeader","getRequestHeaders","getResponseHeader","removeResponseHeader","setResponseHeader"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("vue", {"importedNames":["computed","getCurrentInstance","ref"]});
const __vite_ssr_import_2__ = await __vite_ssr_import__("/node_modules/@unhead/vue/dist/index.mjs", {"importedNames":["useServerHead"]});
const __vite_ssr_import_3__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["useNuxtApp"]});
const __vite_ssr_import_4__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/utils.js", {"importedNames":["toArray"]});
function useRequestEvent(nuxtApp = (0,__vite_ssr_import_3__.useNuxtApp)()) {
  return nuxtApp.ssrContext?.event;
}
Object.defineProperty(__vite_ssr_exports__, "useRequestEvent", { enumerable: true, configurable: true, get(){ return useRequestEvent }});;
function useRequestHeaders(include) {
  if (false) {
    return {};
  };
  const event = useRequestEvent();
  const _headers = event ? (0,__vite_ssr_import_0__.getRequestHeaders)(event) : {};
  if (!include || !event) {
    return _headers;
  };
  const headers = /* @__PURE__ */ Object.create(null);
  for (const _key of include) {
    const key = _key.toLowerCase();
    const header = _headers[key];
    if (header) {
      headers[key] = header;
    }
  };
  return headers;
}
Object.defineProperty(__vite_ssr_exports__, "useRequestHeaders", { enumerable: true, configurable: true, get(){ return useRequestHeaders }});;
function useRequestHeader(header) {
  if (false) {
    return void 0;
  };
  const event = useRequestEvent();
  return event ? (0,__vite_ssr_import_0__.getRequestHeader)(event, header) : void 0;
}
Object.defineProperty(__vite_ssr_exports__, "useRequestHeader", { enumerable: true, configurable: true, get(){ return useRequestHeader }});;
function useRequestFetch() {
  if (false) {
    return globalThis.$fetch;
  };
  return useRequestEvent()?.$fetch || globalThis.$fetch;
}
Object.defineProperty(__vite_ssr_exports__, "useRequestFetch", { enumerable: true, configurable: true, get(){ return useRequestFetch }});;
function setResponseStatus(arg1, arg2, arg3) {
  if (false) {
    return;
  };
  if (arg1 && typeof arg1 !== "number") {
    return (0,__vite_ssr_import_0__.setResponseStatus)(arg1, arg2, arg3);
  };
  const event = useRequestEvent();
  if (event) {
    return (0,__vite_ssr_import_0__.setResponseStatus)(event, arg1, arg2);
  }
}
Object.defineProperty(__vite_ssr_exports__, "setResponseStatus", { enumerable: true, configurable: true, get(){ return setResponseStatus }});;
function useResponseHeader(header) {
  if (false) {
    if (true) {
      return (0,__vite_ssr_import_1__.computed)({
        get: () => void 0,
        set: () => console.warn("[nuxt] Setting response headers is not supported in the browser.")
      });
    };
    return (0,__vite_ssr_import_1__.ref)();
  };
  const event = useRequestEvent();
  return (0,__vite_ssr_import_1__.computed)({
    get() {
      return (0,__vite_ssr_import_0__.getResponseHeader)(event, header);
    },
    set(newValue) {
      if (!newValue) {
        return (0,__vite_ssr_import_0__.removeResponseHeader)(event, header);
      };
      return (0,__vite_ssr_import_0__.setResponseHeader)(event, header, newValue);
    }
  });
}
Object.defineProperty(__vite_ssr_exports__, "useResponseHeader", { enumerable: true, configurable: true, get(){ return useResponseHeader }});;
function prerenderRoutes(path) {
  if (!__vite_ssr_import_meta__.prerender) {
    return;
  };
  const paths = (0,__vite_ssr_import_4__.toArray)(path);
  (0,__vite_ssr_import_0__.appendHeader)(useRequestEvent(), "x-nitro-prerender", paths.map((p) => encodeURIComponent(p)).join(", "));
}
Object.defineProperty(__vite_ssr_exports__, "prerenderRoutes", { enumerable: true, configurable: true, get(){ return prerenderRoutes }});;
const PREHYDRATE_ATTR_KEY = "data-prehydrate-id";
function onPrehydrate(callback, key) {
  if (false) {
    return;
  };
  if (typeof callback !== "string") {
    throw new TypeError("[nuxt] To transform a callback into a string, `onPrehydrate` must be processed by the Nuxt build pipeline. If it is called in a third-party library, make sure to add the library to `build.transpile`.");
  };
  const vm = (0,__vite_ssr_import_1__.getCurrentInstance)();
  if (vm && key) {
    vm.attrs[PREHYDRATE_ATTR_KEY] ||= "";
    key = ":" + key + ":";
    if (!vm.attrs[PREHYDRATE_ATTR_KEY].includes(key)) {
      vm.attrs[PREHYDRATE_ATTR_KEY] += key;
    }
  };
  const code = vm && key ? `document.querySelectorAll('[${PREHYDRATE_ATTR_KEY}*=${JSON.stringify(key)}]').forEach` + callback : callback + "()";
  (0,__vite_ssr_import_2__.useServerHead)({
    script: [{
      key: vm && key ? key : code,
      tagPosition: "bodyClose",
      tagPriority: "critical",
      innerHTML: code
    }]
  });
  return vm && key ? vm.attrs[PREHYDRATE_ATTR_KEY] : void 0;
}
Object.defineProperty(__vite_ssr_exports__, "onPrehydrate", { enumerable: true, configurable: true, get(){ return onPrehydrate }});

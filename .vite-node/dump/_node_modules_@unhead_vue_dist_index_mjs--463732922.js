// /node_modules/@unhead/vue/dist/index.mjs
const __vite_ssr_import_0__ = await __vite_ssr_import__("unhead", {"importedNames":["useScript"]});const __vite_ssr_import_1__ = await __vite_ssr_import__("/node_modules/@unhead/vue/dist/shared/vue.ziyDaVMR.mjs", {"importedNames":["i","h","V"]});const __vite_ssr_import_2__ = await __vite_ssr_import__("@unhead/shared", {"importedNames":["composableNames","whitelistSafeInput","unpackMeta"]});const __vite_ssr_import_3__ = await __vite_ssr_import__("/node_modules/@unhead/vue/dist/shared/vue.-sixQ7xP.mjs", {"importedNames":["u"]});const __vite_ssr_import_4__ = await __vite_ssr_import__("vue", {"importedNames":["getCurrentInstance","onMounted","isRef","watch","onScopeDispose","ref"]});
const __vite_ssr_import_5__ = await __vite_ssr_import__("unhead", {"importedNames":["CapoPlugin","HashHydrationPlugin","createHeadCore"]});
Object.defineProperty(__vite_ssr_exports__, "CapoPlugin", { enumerable: true, configurable: true, get(){ return __vite_ssr_import_5__.CapoPlugin }});
Object.defineProperty(__vite_ssr_exports__, "HashHydrationPlugin", { enumerable: true, configurable: true, get(){ return __vite_ssr_import_5__.HashHydrationPlugin }});
Object.defineProperty(__vite_ssr_exports__, "createHeadCore", { enumerable: true, configurable: true, get(){ return __vite_ssr_import_5__.createHeadCore }});

const __vite_ssr_import_6__ = await __vite_ssr_import__("/node_modules/@unhead/vue/dist/shared/vue.ziyDaVMR.mjs", {"importedNames":["c","a","r","s"]});
Object.defineProperty(__vite_ssr_exports__, "createHead", { enumerable: true, configurable: true, get(){ return __vite_ssr_import_6__.c }});
Object.defineProperty(__vite_ssr_exports__, "createServerHead", { enumerable: true, configurable: true, get(){ return __vite_ssr_import_6__.a }});
Object.defineProperty(__vite_ssr_exports__, "resolveUnrefHeadInput", { enumerable: true, configurable: true, get(){ return __vite_ssr_import_6__.r }});
Object.defineProperty(__vite_ssr_exports__, "setHeadInjectionHandler", { enumerable: true, configurable: true, get(){ return __vite_ssr_import_6__.s }});




const coreComposableNames = [
  "injectHead"
];
const unheadVueComposablesImports = {
  "@unhead/vue": [...coreComposableNames, ...__vite_ssr_import_2__.composableNames]
};

function useHeadSafe(input, options = {}) {
  return (0,__vite_ssr_import_3__.u)(input, { ...options, transform: __vite_ssr_import_2__.whitelistSafeInput });
}

function registerVueScopeHandlers(script, scope) {
  if (!scope) {
    return;
  };
  const _registerCb = (key, cb) => {
    if (!script._cbs[key]) {
      cb(script.instance);
      return () => {
      };
    };
    let i = script._cbs[key].push(cb);
    const destroy = () => {
      if (i) {
        script._cbs[key]?.splice(i - 1, 1);
        i = null;
      }
    };
    (0,__vite_ssr_import_4__.onScopeDispose)(destroy);
    return destroy;
  };
  script.onLoaded = (cb) => _registerCb("loaded", cb);
  script.onError = (cb) => _registerCb("error", cb);
  (0,__vite_ssr_import_4__.onScopeDispose)(() => {
    script._triggerAbortController?.abort();
  });
}
function useScript(_input, _options) {
  const input = typeof _input === "string" ? { src: _input } : _input;
  const options = _options || {};
  const head = options?.head || (0,__vite_ssr_import_1__.i)();
  options.head = head;
  const scope = (0,__vite_ssr_import_4__.getCurrentInstance)();
  options.eventContext = scope;
  if (scope && typeof options.trigger === "undefined") {
    options.trigger = __vite_ssr_import_4__.onMounted;
  } else if ((0,__vite_ssr_import_4__.isRef)(options.trigger)) {
    const refTrigger = options.trigger;
    let off;
    options.trigger = new Promise((resolve) => {
      off = (0,__vite_ssr_import_4__.watch)(refTrigger, (val) => {
        if (val) {
          resolve(true);
        }
      }, {
        immediate: true
      });
      (0,__vite_ssr_import_4__.onScopeDispose)(() => resolve(false), true);
    }).then((val) => {
      off?.();
      return val;
    });
  };
  head._scriptStatusWatcher = head._scriptStatusWatcher || head.hooks.hook("script:updated", ({ script: s }) => {
    s._statusRef.value = s.status;
  });
  const script = (0,__vite_ssr_import_0__.useScript)(input, options);
  script._statusRef = script._statusRef || (0,__vite_ssr_import_4__.ref)(script.status);
  registerVueScopeHandlers(script, scope);
  return new Proxy(script, {
    get(_, key, a) {
      return Reflect.get(_, key === "status" ? "_statusRef" : key, a);
    }
  });
}

function useSeoMeta(input, options) {
  const { title, titleTemplate, ...meta } = input;
  return (0,__vite_ssr_import_3__.u)({
    title,
    titleTemplate,
    // @ts-expect-error runtime type
    _flatMeta: meta
  }, {
    ...options,
    transform(t) {
      const meta2 = (0,__vite_ssr_import_2__.unpackMeta)({ ...t._flatMeta });
      delete t._flatMeta;
      return {
        // @ts-expect-error runtime type
        ...t,
        meta: meta2
      };
    }
  });
}

function useServerHead(input, options = {}) {
  const head = options.head || (0,__vite_ssr_import_1__.i)();
  delete options.head;
  if (head)
    return head.push(input, { ...options, mode: "server" });
}

function useServerHeadSafe(input, options = {}) {
  return useHeadSafe(input, { ...options, mode: "server" });
}

function useServerSeoMeta(input, options) {
  return useSeoMeta(input, { ...options, mode: "server" });
}

const Vue2ProvideUnheadPlugin = (_Vue, head) => {
  _Vue.mixin({
    beforeCreate() {
      const options = this.$options;
      const origProvide = options.provide;
      options.provide = function() {
        let origProvideResult;
        if (typeof origProvide === "function")
          origProvideResult = origProvide.call(this);
        else
          origProvideResult = origProvide || {};
        return {
          ...origProvideResult,
          [__vite_ssr_import_1__.h]: head
        };
      };
    }
  });
};

const VueHeadMixin = {
  created() {
    let source = false;
    if (__vite_ssr_import_1__.V) {
      const instance = (0,__vite_ssr_import_4__.getCurrentInstance)();
      if (!instance)
        return;
      const options = instance.type;
      if (!options || !("head" in options))
        return;
      source = typeof options.head === "function" ? () => options.head.call(instance.proxy) : options.head;
    } else {
      const head = this.$options.head;
      if (head) {
        source = typeof head === "function" ? () => head.call(this) : head;
      }
    };
    source && (0,__vite_ssr_import_3__.u)(source);
  }
};


Object.defineProperty(__vite_ssr_exports__, "Vue2ProvideUnheadPlugin", { enumerable: true, configurable: true, get(){ return Vue2ProvideUnheadPlugin }});
Object.defineProperty(__vite_ssr_exports__, "VueHeadMixin", { enumerable: true, configurable: true, get(){ return VueHeadMixin }});
Object.defineProperty(__vite_ssr_exports__, "injectHead", { enumerable: true, configurable: true, get(){ return __vite_ssr_import_1__.i }});
Object.defineProperty(__vite_ssr_exports__, "unheadVueComposablesImports", { enumerable: true, configurable: true, get(){ return unheadVueComposablesImports }});
Object.defineProperty(__vite_ssr_exports__, "useHead", { enumerable: true, configurable: true, get(){ return __vite_ssr_import_3__.u }});
Object.defineProperty(__vite_ssr_exports__, "useHeadSafe", { enumerable: true, configurable: true, get(){ return useHeadSafe }});
Object.defineProperty(__vite_ssr_exports__, "useScript", { enumerable: true, configurable: true, get(){ return useScript }});
Object.defineProperty(__vite_ssr_exports__, "useSeoMeta", { enumerable: true, configurable: true, get(){ return useSeoMeta }});
Object.defineProperty(__vite_ssr_exports__, "useServerHead", { enumerable: true, configurable: true, get(){ return useServerHead }});
Object.defineProperty(__vite_ssr_exports__, "useServerHeadSafe", { enumerable: true, configurable: true, get(){ return useServerHeadSafe }});
Object.defineProperty(__vite_ssr_exports__, "useServerSeoMeta", { enumerable: true, configurable: true, get(){ return useServerSeoMeta }});

// /pages/posts/[slug].vue?macro=true

const __nuxt_page_meta = {};
__vite_ssr_exports__.default = __nuxt_page_meta;

// Vite
if (__vite_ssr_import_meta__.hot) {
  __vite_ssr_import_meta__.hot.accept(mod => {
    Object.assign(__nuxt_page_meta, mod)
  })
};
// webpack
if (__vite_ssr_import_meta__.webpackHot) {
  __vite_ssr_import_meta__.webpackHot.accept((err) => {
    if (err) { window.location = window.location.href }
  })
}

//# sourceMappingSource=vite-node
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

// /node_modules/nuxt-graphql-request/dist/runtime/plugin.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("graphql-request", {"importedNames":["GraphQLClient"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("remeda", {"importedNames":["mergeAll"]});
const __vite_ssr_import_2__ = await __vite_ssr_import__("/.nuxt/graphql.options.mjs", {"importedNames":["options"]});
const __vite_ssr_import_3__ = await __vite_ssr_import__("/node_modules/nuxt-graphql-request/dist/utils.mjs", {"importedNames":["entries"]});

const __vite_ssr_import_4__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["defineNuxtPlugin"]});
__vite_ssr_exports__.default = (0,__vite_ssr_import_4__.defineNuxtPlugin)(async (nuxtApp) => {
  const runtimeOptions = nuxtApp.$config.public.graphql;
  const runtimeClients = runtimeOptions?.clients ?? {};
  const graphClients = {};
  for (const [clientName, clientConfig] of (0,__vite_ssr_import_3__.entries)(__vite_ssr_import_2__.options.clients)) {
    const runtimeConfig = runtimeClients?.[clientName];
    const mergedConfig = (0,__vite_ssr_import_1__.mergeAll)([
      __vite_ssr_import_2__.options,
      clientConfig,
      runtimeConfig ?? {}
    ]);
    graphClients[clientName] = new __vite_ssr_import_0__.GraphQLClient(mergedConfig.endpoint, mergedConfig.options);
  };
  for (const [clientName, clientConfig] of (0,__vite_ssr_import_3__.entries)(runtimeClients)) {
    if (clientName in graphClients) continue;
    const mergedConfig = (0,__vite_ssr_import_1__.mergeAll)([__vite_ssr_import_2__.options, clientConfig ?? {}]);
    graphClients[clientName] = new __vite_ssr_import_0__.GraphQLClient(mergedConfig.endpoint, mergedConfig.options);
  };
  return {
    provide: {
      graphql: graphClients
    }
  };
});

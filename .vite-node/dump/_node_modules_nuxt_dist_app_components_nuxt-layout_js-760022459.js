// /node_modules/nuxt/dist/app/components/nuxt-layout.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("vue", {"importedNames":["Suspense","computed","defineComponent","h","inject","mergeProps","nextTick","onMounted","provide","ref","unref"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/router.js", {"importedNames":["useRoute","useRouter"]});
const __vite_ssr_import_2__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["useNuxtApp"]});
const __vite_ssr_import_3__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/components/utils.js", {"importedNames":["_wrapInTransition"]});
const __vite_ssr_import_4__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/components/injections.js", {"importedNames":["LayoutMetaSymbol","PageRouteSymbol"]});
const __vite_ssr_import_5__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fpages.mjs", {"importedNames":["useRoute"]});
const __vite_ssr_import_6__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Flayouts.mjs", {"importedNames":["default"]});
const __vite_ssr_import_7__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fnuxt.config.mjs", {"importedNames":["appLayoutTransition"]});
const LayoutLoader = (0,__vite_ssr_import_0__.defineComponent)({
  name: "LayoutLoader",
  inheritAttrs: false,
  props: {
    name: String,
    layoutProps: Object
  },
  setup(props, context) {
    return () => (0,__vite_ssr_import_0__.h)(__vite_ssr_import_6__.default[props.name], props.layoutProps, context.slots);
  }
});
__vite_ssr_exports__.default = (0,__vite_ssr_import_0__.defineComponent)({
  name: "NuxtLayout",
  inheritAttrs: false,
  props: {
    name: {
      type: [String, Boolean, Object],
      default: null
    },
    fallback: {
      type: [String, Object],
      default: null
    }
  },
  setup(props, context) {
    const nuxtApp = (0,__vite_ssr_import_2__.useNuxtApp)();
    const injectedRoute = (0,__vite_ssr_import_0__.inject)((0,__vite_ssr_import_4__.PageRouteSymbol));
    const route = injectedRoute === (0,__vite_ssr_import_1__.useRoute)() ? (0,__vite_ssr_import_5__.useRoute)() : injectedRoute;
    const layout = (0,__vite_ssr_import_0__.computed)(() => {
      let layout2 = (0,__vite_ssr_import_0__.unref)(props.name) ?? route.meta.layout ?? "default";
      if (layout2 && !(layout2 in __vite_ssr_import_6__.default)) {
        if (true && layout2 !== "default") {
          console.warn(`Invalid layout \`${layout2}\` selected.`);
        };
        if (props.fallback) {
          layout2 = (0,__vite_ssr_import_0__.unref)(props.fallback);
        }
      };
      return layout2;
    });
    const layoutRef = (0,__vite_ssr_import_0__.ref)();
    context.expose({ layoutRef });
    const done = nuxtApp.deferHydration();
    if (false && nuxtApp.isHydrating) {
      const removeErrorHook = nuxtApp.hooks.hookOnce("app:error", done);
      (0,__vite_ssr_import_1__.useRouter)().beforeEach(removeErrorHook);
    };
    if (true) {
      nuxtApp._isNuxtLayoutUsed = true;
    };
    return () => {
      const hasLayout = layout.value && layout.value in __vite_ssr_import_6__.default;
      const transitionProps = route.meta.layoutTransition ?? __vite_ssr_import_7__.appLayoutTransition;
      return (0,__vite_ssr_import_3__._wrapInTransition)(hasLayout && transitionProps, {
        default: () => (0,__vite_ssr_import_0__.h)((0,__vite_ssr_import_0__.Suspense), { suspensible: true, onResolve: () => {
          (0,__vite_ssr_import_0__.nextTick)(done);
        } }, {
          default: () => (0,__vite_ssr_import_0__.h)(
            LayoutProvider,
            {
              layoutProps: (0,__vite_ssr_import_0__.mergeProps)(context.attrs, { ref: layoutRef }),
              key: layout.value || void 0,
              name: layout.value,
              shouldProvide: !props.name,
              hasTransition: !!transitionProps
            },
            context.slots
          )
        })
      }).default();
    };
  }
});
const LayoutProvider = (0,__vite_ssr_import_0__.defineComponent)({
  name: "NuxtLayoutProvider",
  inheritAttrs: false,
  props: {
    name: {
      type: [String, Boolean]
    },
    layoutProps: {
      type: Object
    },
    hasTransition: {
      type: Boolean
    },
    shouldProvide: {
      type: Boolean
    }
  },
  setup(props, context) {
    const name = props.name;
    if (props.shouldProvide) {
      (0,__vite_ssr_import_0__.provide)((0,__vite_ssr_import_4__.LayoutMetaSymbol), {
        isCurrent: (route) => name === (route.meta.layout ?? "default")
      });
    };
    let vnode;
    if (true && false) {
      (0,__vite_ssr_import_0__.onMounted)(() => {
        (0,__vite_ssr_import_0__.nextTick)(() => {
          if (["#comment", "#text"].includes(vnode?.el?.nodeName)) {
            if (name) {
              console.warn(`[nuxt] \`${name}\` layout does not have a single root node and will cause errors when navigating between routes.`);
            } else {
              console.warn("[nuxt] `<NuxtLayout>` needs to be passed a single root node in its default slot.");
            }
          }
        });
      });
    };
    return () => {
      if (!name || typeof name === "string" && !(name in __vite_ssr_import_6__.default)) {
        if (true && false && props.hasTransition) {
          vnode = context.slots.default?.();
          return vnode;
        };
        return context.slots.default?.();
      };
      if (true && false && props.hasTransition) {
        vnode = (0,__vite_ssr_import_0__.h)(
          LayoutLoader,
          { key: name, layoutProps: props.layoutProps, name },
          context.slots
        );
        return vnode;
      };
      return (0,__vite_ssr_import_0__.h)(
        LayoutLoader,
        { key: name, layoutProps: props.layoutProps, name },
        context.slots
      );
    };
  }
});

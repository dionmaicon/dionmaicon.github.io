// virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Froutes.mjs
const __vite_ssr_import_0__ = await __vite_ssr_import__("/pages/index.vue?macro=true", {"importedNames":["default"]});const __vite_ssr_import_1__ = await __vite_ssr_import__("/pages/posts/[slug].vue?macro=true", {"importedNames":["default"]});
if (__vite_ssr_import_meta__.hot) {
  __vite_ssr_import_meta__.hot.accept((mod) => {
    const router = __vite_ssr_import_meta__.hot.data.router;
    const generateRoutes = __vite_ssr_import_meta__.hot.data.generateRoutes;
    if (!router || !generateRoutes) {
      __vite_ssr_import_meta__.hot.invalidate('[nuxt] Cannot replace routes because there is no active router. Reloading.');
      return
    };
    router.clearRoutes();
    const routes = generateRoutes(mod.default || mod);
    function addRoutes (routes) {
      for (const route of routes) {
        router.addRoute(route)
      };
      router.replace(router.currentRoute.value.fullPath)
    }
    if (routes && 'then' in routes) {
      routes.then(addRoutes)
    } else {
      addRoutes(routes)
    }
  })
};

function handleHotUpdate(_router, _generateRoutes) {
  if (__vite_ssr_import_meta__.hot) {
    __vite_ssr_import_meta__.hot.data ||= {};
    __vite_ssr_import_meta__.hot.data.router = _router;
    __vite_ssr_import_meta__.hot.data.generateRoutes = _generateRoutes
  }
}
Object.defineProperty(__vite_ssr_exports__, "handleHotUpdate", { enumerable: true, configurable: true, get(){ return handleHotUpdate }});;


__vite_ssr_exports__.default = [
  {
    name: "index",
    path: "/",
    component: () => __vite_ssr_dynamic_import__("/pages/index.vue")
  },
  {
    name: "posts-slug",
    path: "/posts/:slug()",
    component: () => __vite_ssr_dynamic_import__("/pages/posts/[slug].vue")
  }
]

//# sourceMappingSource=vite-node
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpcnR1YWw6bnV4dDolMkZtZWRpYSUyRmRkJTJGRGF0YSUyRlByb2plY3RzJTJGZGlvbm1haWNvbi5naXRodWIuaW8lMkYubnV4dCUyRnJvdXRlcy5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiXG5pZiAoaW1wb3J0Lm1ldGEuaG90KSB7XG4gIGltcG9ydC5tZXRhLmhvdC5hY2NlcHQoKG1vZCkgPT4ge1xuICAgIGNvbnN0IHJvdXRlciA9IGltcG9ydC5tZXRhLmhvdC5kYXRhLnJvdXRlclxuICAgIGNvbnN0IGdlbmVyYXRlUm91dGVzID0gaW1wb3J0Lm1ldGEuaG90LmRhdGEuZ2VuZXJhdGVSb3V0ZXNcbiAgICBpZiAoIXJvdXRlciB8fCAhZ2VuZXJhdGVSb3V0ZXMpIHtcbiAgICAgIGltcG9ydC5tZXRhLmhvdC5pbnZhbGlkYXRlKCdbbnV4dF0gQ2Fubm90IHJlcGxhY2Ugcm91dGVzIGJlY2F1c2UgdGhlcmUgaXMgbm8gYWN0aXZlIHJvdXRlci4gUmVsb2FkaW5nLicpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgcm91dGVyLmNsZWFyUm91dGVzKClcbiAgICBjb25zdCByb3V0ZXMgPSBnZW5lcmF0ZVJvdXRlcyhtb2QuZGVmYXVsdCB8fCBtb2QpXG4gICAgZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgICAgIGZvciAoY29uc3Qgcm91dGUgb2Ygcm91dGVzKSB7XG4gICAgICAgIHJvdXRlci5hZGRSb3V0ZShyb3V0ZSlcbiAgICAgIH1cbiAgICAgIHJvdXRlci5yZXBsYWNlKHJvdXRlci5jdXJyZW50Um91dGUudmFsdWUuZnVsbFBhdGgpXG4gICAgfVxuICAgIGlmIChyb3V0ZXMgJiYgJ3RoZW4nIGluIHJvdXRlcykge1xuICAgICAgcm91dGVzLnRoZW4oYWRkUm91dGVzKVxuICAgIH0gZWxzZSB7XG4gICAgICBhZGRSb3V0ZXMocm91dGVzKVxuICAgIH1cbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUhvdFVwZGF0ZShfcm91dGVyLCBfZ2VuZXJhdGVSb3V0ZXMpIHtcbiAgaWYgKGltcG9ydC5tZXRhLmhvdCkge1xuICAgIGltcG9ydC5tZXRhLmhvdC5kYXRhIHx8PSB7fVxuICAgIGltcG9ydC5tZXRhLmhvdC5kYXRhLnJvdXRlciA9IF9yb3V0ZXJcbiAgICBpbXBvcnQubWV0YS5ob3QuZGF0YS5nZW5lcmF0ZVJvdXRlcyA9IF9nZW5lcmF0ZVJvdXRlc1xuICB9XG59XG5pbXBvcnQgeyBkZWZhdWx0IGFzIGluZGV4WXFYa3hUYUYyV01ldGEgfSBmcm9tIFwiL21lZGlhL2RkL0RhdGEvUHJvamVjdHMvZGlvbm1haWNvbi5naXRodWIuaW8vcGFnZXMvaW5kZXgudnVlP21hY3JvPXRydWVcIjtcbmltcG9ydCB7IGRlZmF1bHQgYXMgXzkxc2x1Z185M25SdkpIdE1SbWZNZXRhIH0gZnJvbSBcIi9tZWRpYS9kZC9EYXRhL1Byb2plY3RzL2Rpb25tYWljb24uZ2l0aHViLmlvL3BhZ2VzL3Bvc3RzL1tzbHVnXS52dWU/bWFjcm89dHJ1ZVwiO1xuZXhwb3J0IGRlZmF1bHQgW1xuICB7XG4gICAgbmFtZTogXCJpbmRleFwiLFxuICAgIHBhdGg6IFwiL1wiLFxuICAgIGNvbXBvbmVudDogKCkgPT4gaW1wb3J0KFwiL21lZGlhL2RkL0RhdGEvUHJvamVjdHMvZGlvbm1haWNvbi5naXRodWIuaW8vcGFnZXMvaW5kZXgudnVlXCIpXG4gIH0sXG4gIHtcbiAgICBuYW1lOiBcInBvc3RzLXNsdWdcIixcbiAgICBwYXRoOiBcIi9wb3N0cy86c2x1ZygpXCIsXG4gICAgY29tcG9uZW50OiAoKSA9PiBpbXBvcnQoXCIvbWVkaWEvZGQvRGF0YS9Qcm9qZWN0cy9kaW9ubWFpY29uLmdpdGh1Yi5pby9wYWdlcy9wb3N0cy9bc2x1Z10udnVlXCIpXG4gIH1cbl0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0NBLHNIQUNBO0FBaENBLEVBQUUsQ0FBQyxDQUFDLHdCQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDckIsQ0FBQyxDQUFDLHdCQUFX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QUMsQ0FBQztBQUNGOzs7O0FBR0EsOEJBQWMsQ0FBQztBQUNmLENBQUMsQ0FBQztBQUNGLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNiLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsMkJBQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7QUFDOUMsQ0FBQyxDQUFDLENBQUM7QUFDSCxDQUFDLENBQUM7QUFDRixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztBQUN0QixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsMkJBQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUNyRCxDQUFDLENBQUM7QUFDRiJ9

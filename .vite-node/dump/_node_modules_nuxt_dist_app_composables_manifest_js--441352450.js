// /node_modules/nuxt/dist/app/composables/manifest.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("radix3", {"importedNames":["createMatcherFromExport","createRouter","toRouteMatcher"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("defu", {"importedNames":["defu"]});
const __vite_ssr_import_2__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["useNuxtApp","useRuntimeConfig"]});
const __vite_ssr_import_3__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fnuxt.config.mjs", {"importedNames":["appManifest"]});
const __vite_ssr_import_4__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fpaths.mjs", {"importedNames":["buildAssetsURL"]});
let manifest;
let matcher;
function fetchManifest() {
  if (!__vite_ssr_import_3__.appManifest) {
    throw new Error("[nuxt] app manifest should be enabled with `experimental.appManifest`");
  };
  if (true) {
    manifest = __vite_ssr_dynamic_import__("/.nuxt/manifest/meta/dev.json");
  } else {
    manifest = $fetch((0,__vite_ssr_import_4__.buildAssetsURL)(`builds/meta/${(0,__vite_ssr_import_2__.useRuntimeConfig)().app.buildId}.json`), {
      responseType: "json"
    });
  };
  manifest.then((m) => {
    matcher = (0,__vite_ssr_import_0__.createMatcherFromExport)(m.matcher);
  }).catch((e) => {
    console.error("[nuxt] Error fetching app manifest.", e);
  });
  return manifest;
}
function getAppManifest() {
  if (!__vite_ssr_import_3__.appManifest) {
    throw new Error("[nuxt] app manifest should be enabled with `experimental.appManifest`");
  };
  if (true) {
    (0,__vite_ssr_import_2__.useNuxtApp)().ssrContext._preloadManifest = true;
  };
  return manifest || fetchManifest();
}
Object.defineProperty(__vite_ssr_exports__, "getAppManifest", { enumerable: true, configurable: true, get(){ return getAppManifest }});;
async function getRouteRules(arg) {
  const path = typeof arg === "string" ? arg : arg.path;
  if (true) {
    (0,__vite_ssr_import_2__.useNuxtApp)().ssrContext._preloadManifest = true;
    const _routeRulesMatcher = (0,__vite_ssr_import_0__.toRouteMatcher)(
      (0,__vite_ssr_import_0__.createRouter)({ routes: (0,__vite_ssr_import_2__.useRuntimeConfig)().nitro.routeRules })
    );
    return (0,__vite_ssr_import_1__.defu)({}, ..._routeRulesMatcher.matchAll(path).reverse());
  };
  await getAppManifest();
  if (!matcher) {
    console.error("[nuxt] Error creating app manifest matcher.", matcher);
    return {};
  };
  try {
    return (0,__vite_ssr_import_1__.defu)({}, ...matcher.matchAll(path).reverse());
  } catch (e) {
    console.error("[nuxt] Error matching route rules.", e);
    return {};
  }
}
Object.defineProperty(__vite_ssr_exports__, "getRouteRules", { enumerable: true, configurable: true, get(){ return getRouteRules }});

// /node_modules/@unhead/vue/dist/shared/vue.ziyDaVMR.mjs
const __vite_ssr_import_0__ = await __vite_ssr_import__("unhead", {"importedNames":["createServerHead","createHead","getActiveHead"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("vue", {"importedNames":["version","unref","nextTick","inject"]});
const __vite_ssr_import_2__ = await __vite_ssr_import__("@unhead/shared", {"importedNames":["defineHeadPlugin"]});
const Vue3 = __vite_ssr_import_1__.version[0] === "3";
function resolveUnref(r) {
  return typeof r === "function" ? r() : (0,__vite_ssr_import_1__.unref)(r);
}
function resolveUnrefHeadInput(ref) {
  if (ref instanceof Promise || ref instanceof Date || ref instanceof RegExp)
    return ref;
  const root = resolveUnref(ref);
  if (!ref || !root)
    return root;
  if (Array.isArray(root))
    return root.map((r) => resolveUnrefHeadInput(r));
  if (typeof root === "object") {
    const resolved = {};
    for (const k in root) {
      if (!Object.prototype.hasOwnProperty.call(root, k)) {
        continue;
      };
      if (k === "titleTemplate" || k[0] === "o" && k[1] === "n") {
        resolved[k] = (0,__vite_ssr_import_1__.unref)(root[k]);
        continue;
      };
      resolved[k] = resolveUnrefHeadInput(root[k]);
    };
    return resolved;
  };
  return root;
}
const VueReactivityPlugin = (0,__vite_ssr_import_2__.defineHeadPlugin)({
  hooks: {
    "entries:resolve": (ctx) => {
      for (const entry of ctx.entries)
        entry.resolvedInput = resolveUnrefHeadInput(entry.input);
    }
  }
});
const headSymbol = "usehead";
function vueInstall(head) {
  const plugin = {
    install(app) {
      if (Vue3) {
        app.config.globalProperties.$unhead = head;
        app.config.globalProperties.$head = head;
        app.provide(headSymbol, head);
      }
    }
  };
  return plugin.install;
}
function createServerHead(options = {}) {
  const head = (0,__vite_ssr_import_0__.createServerHead)(options);
  head.use(VueReactivityPlugin);
  head.install = vueInstall(head);
  return head;
}
function createHead(options = {}) {
  options.domDelayFn = options.domDelayFn || ((fn) => (0,__vite_ssr_import_1__.nextTick)(() => setTimeout(() => fn(), 0)));
  const head = (0,__vite_ssr_import_0__.createHead)(options);
  head.use(VueReactivityPlugin);
  head.install = vueInstall(head);
  return head;
}
const _global = typeof globalThis !== "undefined" ? globalThis : false ? void 0 : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
const globalKey = "__unhead_injection_handler__";
function setHeadInjectionHandler(handler) {
  _global[globalKey] = handler;
}
function injectHead() {
  if (globalKey in _global) {
    return _global[globalKey]();
  };
  const head = (0,__vite_ssr_import_1__.inject)(headSymbol);
  if (!head && process.env.NODE_ENV !== "production")
    console.warn("Unhead is missing Vue context, falling back to shared context. This may have unexpected results.");
  return head || (0,__vite_ssr_import_0__.getActiveHead)();
}

Object.defineProperty(__vite_ssr_exports__, "V", { enumerable: true, configurable: true, get(){ return Vue3 }});
Object.defineProperty(__vite_ssr_exports__, "a", { enumerable: true, configurable: true, get(){ return createServerHead }});
Object.defineProperty(__vite_ssr_exports__, "c", { enumerable: true, configurable: true, get(){ return createHead }});
Object.defineProperty(__vite_ssr_exports__, "h", { enumerable: true, configurable: true, get(){ return headSymbol }});
Object.defineProperty(__vite_ssr_exports__, "i", { enumerable: true, configurable: true, get(){ return injectHead }});
Object.defineProperty(__vite_ssr_exports__, "r", { enumerable: true, configurable: true, get(){ return resolveUnrefHeadInput }});
Object.defineProperty(__vite_ssr_exports__, "s", { enumerable: true, configurable: true, get(){ return setHeadInjectionHandler }});

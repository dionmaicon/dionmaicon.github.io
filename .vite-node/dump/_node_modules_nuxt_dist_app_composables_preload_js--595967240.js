// /node_modules/nuxt/dist/app/composables/preload.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["useNuxtApp"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/utils.js", {"importedNames":["toArray"]});
const __vite_ssr_import_2__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/router.js", {"importedNames":["useRouter"]});
const preloadComponents = async (components) => {
  if (true) {
    return;
  };
  const nuxtApp = (0,__vite_ssr_import_0__.useNuxtApp)();
  components = (0,__vite_ssr_import_1__.toArray)(components);
  await Promise.all(components.map((name) => {
    const component = nuxtApp.vueApp._context.components[name];
    if (component) {
      return _loadAsyncComponent(component);
    }
  }));
};
Object.defineProperty(__vite_ssr_exports__, "preloadComponents", { enumerable: true, configurable: true, get(){ return preloadComponents }});
const prefetchComponents = (components) => {
  if (true) {
    return;
  };
  return preloadComponents(components);
};
Object.defineProperty(__vite_ssr_exports__, "prefetchComponents", { enumerable: true, configurable: true, get(){ return prefetchComponents }});
function _loadAsyncComponent(component) {
  if (component?.__asyncLoader && !component.__asyncResolved) {
    return component.__asyncLoader();
  }
}
async function preloadRouteComponents(to, router = (0,__vite_ssr_import_2__.useRouter)()) {
  if (true) {
    return;
  };
  const { path, matched } = router.resolve(to);
  if (!matched.length) {
    return;
  };
  if (!router._routePreloaded) {
    router._routePreloaded = /* @__PURE__ */ new Set();
  };
  if (router._routePreloaded.has(path)) {
    return;
  };
  const promises = router._preloadPromises = router._preloadPromises || [];
  if (promises.length > 4) {
    return Promise.all(promises).then(() => preloadRouteComponents(to, router));
  };
  router._routePreloaded.add(path);
  const components = matched.map((component) => component.components?.default).filter((component) => typeof component === "function");
  for (const component of components) {
    const promise = Promise.resolve(component()).catch(() => {
    }).finally(() => promises.splice(promises.indexOf(promise)));
    promises.push(promise);
  };
  await Promise.all(promises);
}
Object.defineProperty(__vite_ssr_exports__, "preloadRouteComponents", { enumerable: true, configurable: true, get(){ return preloadRouteComponents }});

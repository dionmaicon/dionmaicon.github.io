// /node_modules/nuxt/dist/app/plugins/dev-server-logs.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("/node_modules/unctx/dist/index.mjs", {"importedNames":["executeAsync"]});const __vite_ssr_import_1__ = await __vite_ssr_import__("consola", {"importedNames":["createConsola"]});const __vite_ssr_import_2__ = await __vite_ssr_import__("devalue", {"importedNames":["parse"]});const __vite_ssr_import_3__ = await __vite_ssr_import__("vue", {"importedNames":["h"]});const __vite_ssr_import_4__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["defineNuxtPlugin"]});const __vite_ssr_import_5__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fnuxt.config.mjs", {"importedNames":["devLogs","devRootDir"]});/* _processed_nuxt_unctx_transform */





const devRevivers = true ? {} : {
  VNode: (data) => (0,__vite_ssr_import_3__.h)(data.type, data.props),
  URL: (data) => new URL(data)
};
__vite_ssr_exports__.default = (0,__vite_ssr_import_4__.defineNuxtPlugin)(async (nuxtApp) => {let __temp, __restore;
  if (false) {
    return;
  };
  if (true) {
    nuxtApp.ssrContext.event.context._payloadReducers = nuxtApp.ssrContext._payloadReducers;
    return;
  };
  if (__vite_ssr_import_5__.devLogs !== "silent") {
    const logger = (0,__vite_ssr_import_1__.createConsola)({
      formatOptions: {
        colors: true,
        date: true
      }
    });
    nuxtApp.hook("dev:ssr-logs", (logs) => {
      for (const log of logs) {
        logger.log(normalizeServerLog({ ...log }));
      }
    });
  };
  if (false) {
    const nuxtLogsElement = (void 0).querySelector(`[data-nuxt-logs="${nuxtApp._id}"]`);
    const content = nuxtLogsElement?.textContent;
    const logs = content ? (0,__vite_ssr_import_2__.parse)(content, { ...devRevivers, ...nuxtApp._payloadRevivers }) : [];
    ;(([__temp,__restore]=(0,__vite_ssr_import_0__.executeAsync)(()=>nuxtApp.hooks.callHook("dev:ssr-logs", logs))),await __temp,__restore());;
  }
},1);
function normalizeFilenames(stack) {
  if (!stack) {
    return "";
  };
  let message = "";
  for (const item of stack) {
    const source = item.source.replace(`${__vite_ssr_import_5__.devRootDir}/`, "");
    if (item.function) {
      message += `  at ${item.function} (${source})
`;
    } else {
      message += `  at ${source}
`;
    }
  };
  return message;
}
function normalizeServerLog(log) {
  log.additional = normalizeFilenames(log.stack);
  log.tag = "ssr";
  delete log.stack;
  return log;
}

// /node_modules/nuxt/dist/app/composables/router.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("vue", {"importedNames":["getCurrentInstance","hasInjectionContext","inject","onScopeDispose"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("h3", {"importedNames":["sanitizeStatusCode"]});
const __vite_ssr_import_2__ = await __vite_ssr_import__("ufo", {"importedNames":["hasProtocol","isScriptProtocol","joinURL","withQuery"]});
const __vite_ssr_import_3__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["useNuxtApp","useRuntimeConfig"]});
const __vite_ssr_import_4__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/components/injections.js", {"importedNames":["PageRouteSymbol"]});
const __vite_ssr_import_5__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/error.js", {"importedNames":["createError","showError"]});
const useRouter = () => {
  return (0,__vite_ssr_import_3__.useNuxtApp)()?.$router;
};
Object.defineProperty(__vite_ssr_exports__, "useRouter", { enumerable: true, configurable: true, get(){ return useRouter }});
const useRoute = () => {
  if (!(0,__vite_ssr_import_0__.getCurrentInstance)() && isProcessingMiddleware()) {
    console.warn("[nuxt] Calling `useRoute` within middleware may lead to misleading results. Instead, use the (to, from) arguments passed to the middleware to access the new and old routes.");
  };
  if ((0,__vite_ssr_import_0__.hasInjectionContext)()) {
    return (0,__vite_ssr_import_0__.inject)((0,__vite_ssr_import_4__.PageRouteSymbol), (0,__vite_ssr_import_3__.useNuxtApp)()._route);
  };
  return (0,__vite_ssr_import_3__.useNuxtApp)()._route;
};
Object.defineProperty(__vite_ssr_exports__, "useRoute", { enumerable: true, configurable: true, get(){ return useRoute }});
const onBeforeRouteLeave = (guard) => {
  const unsubscribe = useRouter().beforeEach((to, from, next) => {
    if (to === from) {
      return;
    };
    return guard(to, from, next);
  });
  (0,__vite_ssr_import_0__.onScopeDispose)(unsubscribe);
};
Object.defineProperty(__vite_ssr_exports__, "onBeforeRouteLeave", { enumerable: true, configurable: true, get(){ return onBeforeRouteLeave }});
const onBeforeRouteUpdate = (guard) => {
  const unsubscribe = useRouter().beforeEach(guard);
  (0,__vite_ssr_import_0__.onScopeDispose)(unsubscribe);
};
Object.defineProperty(__vite_ssr_exports__, "onBeforeRouteUpdate", { enumerable: true, configurable: true, get(){ return onBeforeRouteUpdate }});
// @__NO_SIDE_EFFECTS__
function defineNuxtRouteMiddleware(middleware) {
  return middleware;
}
Object.defineProperty(__vite_ssr_exports__, "defineNuxtRouteMiddleware", { enumerable: true, configurable: true, get(){ return defineNuxtRouteMiddleware }});;
const addRouteMiddleware = (name, middleware, options = {}) => {
  const nuxtApp = (0,__vite_ssr_import_3__.useNuxtApp)();
  const global = options.global || typeof name !== "string";
  const mw = typeof name !== "string" ? name : middleware;
  if (!mw) {
    console.warn("[nuxt] No route middleware passed to `addRouteMiddleware`.", name);
    return;
  };
  if (global) {
    nuxtApp._middleware.global.push(mw);
  } else {
    nuxtApp._middleware.named[name] = mw;
  }
};
Object.defineProperty(__vite_ssr_exports__, "addRouteMiddleware", { enumerable: true, configurable: true, get(){ return addRouteMiddleware }});
const isProcessingMiddleware = () => {
  try {
    if ((0,__vite_ssr_import_3__.useNuxtApp)()._processingMiddleware) {
      return true;
    }
  } catch {
    return false;
  };
  return false;
};
const URL_QUOTE_RE = /"/g;
const navigateTo = (to, options) => {
  if (!to) {
    to = "/";
  };
  const toPath = typeof to === "string" ? to : "path" in to ? resolveRouteObject(to) : useRouter().resolve(to).href;
  if (false) {
    const { target = "_blank", windowFeatures = {} } = options.open;
    const features = Object.entries(windowFeatures).filter(([_, value]) => value !== void 0).map(([feature, value]) => `${feature.toLowerCase()}=${value}`).join(", ");
    open(toPath, target, features);
    return Promise.resolve();
  };
  const isExternalHost = (0,__vite_ssr_import_2__.hasProtocol)(toPath, { acceptRelative: true });
  const isExternal = options?.external || isExternalHost;
  if (isExternal) {
    if (!options?.external) {
      throw new Error("Navigating to an external URL is not allowed by default. Use `navigateTo(url, { external: true })`.");
    };
    const { protocol } = new URL(toPath, false ? (void 0).location.href : "http://localhost");
    if (protocol && (0,__vite_ssr_import_2__.isScriptProtocol)(protocol)) {
      throw new Error(`Cannot navigate to a URL with '${protocol}' protocol.`);
    }
  };
  const inMiddleware = isProcessingMiddleware();
  if (false) {
    if (options?.replace) {
      return typeof to === "string" ? { path: to, replace: true } : { ...to, replace: true };
    };
    return to;
  };
  const router = useRouter();
  const nuxtApp = (0,__vite_ssr_import_3__.useNuxtApp)();
  if (true) {
    if (nuxtApp.ssrContext) {
      const fullPath = typeof to === "string" || isExternal ? toPath : router.resolve(to).fullPath || "/";
      const location2 = isExternal ? toPath : (0,__vite_ssr_import_2__.joinURL)((0,__vite_ssr_import_3__.useRuntimeConfig)().app.baseURL, fullPath);
      const redirect = async function(response) {
        await nuxtApp.callHook("app:redirected");
        const encodedLoc = location2.replace(URL_QUOTE_RE, "%22");
        const encodedHeader = encodeURL(location2, isExternalHost);
        nuxtApp.ssrContext._renderResponse = {
          statusCode: (0,__vite_ssr_import_1__.sanitizeStatusCode)(options?.redirectCode || 302, 302),
          body: `<!DOCTYPE html><html><head><meta http-equiv="refresh" content="0; url=${encodedLoc}"></head></html>`,
          headers: { location: encodedHeader }
        };
        return response;
      };
      if (!isExternal && inMiddleware) {
        router.afterEach((final) => final.fullPath === fullPath ? redirect(false) : void 0);
        return to;
      };
      return redirect(!inMiddleware ? void 0 : (
        /* abort route navigation */
        false
      ));
    }
  };
  if (isExternal) {
    nuxtApp._scope.stop();
    if (options?.replace) {
      (void 0).replace(toPath);
    } else {
      (void 0).href = toPath;
    };
    if (inMiddleware) {
      if (!nuxtApp.isHydrating) {
        return false;
      };
      return new Promise(() => {
      });
    };
    return Promise.resolve();
  };
  return options?.replace ? router.replace(to) : router.push(to);
};
Object.defineProperty(__vite_ssr_exports__, "navigateTo", { enumerable: true, configurable: true, get(){ return navigateTo }});
const abortNavigation = (err) => {
  if (!isProcessingMiddleware()) {
    throw new Error("abortNavigation() is only usable inside a route middleware handler.");
  };
  if (!err) {
    return false;
  };
  err = (0,__vite_ssr_import_5__.createError)(err);
  if (err.fatal) {
    (0,__vite_ssr_import_3__.useNuxtApp)().runWithContext(() => (0,__vite_ssr_import_5__.showError)(err));
  };
  throw err;
};
Object.defineProperty(__vite_ssr_exports__, "abortNavigation", { enumerable: true, configurable: true, get(){ return abortNavigation }});
const setPageLayout = (layout) => {
  const nuxtApp = (0,__vite_ssr_import_3__.useNuxtApp)();
  if (true) {
    if ((0,__vite_ssr_import_0__.getCurrentInstance)() && nuxtApp.payload.state._layout !== layout) {
      console.warn("[warn] [nuxt] `setPageLayout` should not be called to change the layout on the server within a component as this will cause hydration errors.");
    };
    nuxtApp.payload.state._layout = layout;
  };
  if (nuxtApp.isHydrating && nuxtApp.payload.serverRendered && nuxtApp.payload.state._layout !== layout) {
    console.warn("[warn] [nuxt] `setPageLayout` should not be called to change the layout during hydration as this will cause hydration errors.");
  };
  const inMiddleware = isProcessingMiddleware();
  if (inMiddleware || true) {
    const unsubscribe = useRouter().beforeResolve((to) => {
      to.meta.layout = layout;
      unsubscribe();
    });
  };
  if (!inMiddleware) {
    useRoute().meta.layout = layout;
  }
};
Object.defineProperty(__vite_ssr_exports__, "setPageLayout", { enumerable: true, configurable: true, get(){ return setPageLayout }});
function resolveRouteObject(to) {
  return (0,__vite_ssr_import_2__.withQuery)(to.path || "", to.query || {}) + (to.hash || "");
}
Object.defineProperty(__vite_ssr_exports__, "resolveRouteObject", { enumerable: true, configurable: true, get(){ return resolveRouteObject }});;
function encodeURL(location2, isExternalHost = false) {
  const url = new URL(location2, "http://localhost");
  if (!isExternalHost) {
    return url.pathname + url.search + url.hash;
  };
  if (location2.startsWith("//")) {
    return url.toString().replace(url.protocol, "");
  };
  return url.toString();
}
Object.defineProperty(__vite_ssr_exports__, "encodeURL", { enumerable: true, configurable: true, get(){ return encodeURL }});

// /node_modules/@nuxtjs/color-mode/dist/runtime/plugin.server.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("vue", {"importedNames":["reactive","ref"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fcolor-mode-options.mjs", {"importedNames":["preference","hid","script","dataValue","storage","storageKey"]});

const __vite_ssr_import_2__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["defineNuxtPlugin"]});
const __vite_ssr_import_3__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/compat/vue-demi.js", {"importedNames":["isVue2","isVue3"]});
const __vite_ssr_import_4__ = await __vite_ssr_import__("/node_modules/@unhead/vue/dist/index.mjs", {"importedNames":["useHead"]});
const __vite_ssr_import_5__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/state.js", {"importedNames":["useState"]});
const __vite_ssr_import_6__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/router.js", {"importedNames":["useRouter"]});
const __vite_ssr_import_7__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/ssr.js", {"importedNames":["useRequestHeaders"]});
const addScript = (head) => {
  head.script = head.script || [];
  head.script.push({
    hid: __vite_ssr_import_1__.hid,
    innerHTML: __vite_ssr_import_1__.script
  });
  const serializeProp = "__dangerouslyDisableSanitizersByTagID";
  head[serializeProp] = head[serializeProp] || {};
  head[serializeProp][__vite_ssr_import_1__.hid] = ["innerHTML"];
};
__vite_ssr_exports__.default = (0,__vite_ssr_import_2__.defineNuxtPlugin)((nuxtApp) => {
  const colorMode = nuxtApp.ssrContext?.islandContext ? (0,__vite_ssr_import_0__.ref)({}) : (0,__vite_ssr_import_5__.useState)("color-mode", () => (0,__vite_ssr_import_0__.reactive)({
    preference: __vite_ssr_import_1__.preference,
    value: __vite_ssr_import_1__.preference,
    unknown: true,
    forced: false
  })).value;
  const htmlAttrs = {};
  if (__vite_ssr_import_3__.isVue2) {
    const app = nuxtApp.nuxt2Context.app;
    if (typeof app.head === "function") {
      const originalHead = app.head;
      app.head = function() {
        const head = originalHead.call(this) || {};
        addScript(head);
        head.htmlAttrs = htmlAttrs;
        return head;
      };
    } else {
      addScript(app.head);
      app.head.htmlAttrs = htmlAttrs;
    }
  };
  if (__vite_ssr_import_3__.isVue3) {
    if (__vite_ssr_import_1__.storage === "cookie") {
      const { cookie } = (0,__vite_ssr_import_7__.useRequestHeaders)(["cookie"]);
      const [, value] = cookie?.split("; ").map((s) => s.split("=")).find(([k]) => k === __vite_ssr_import_1__.storageKey) ?? [];
      if (value) {
        colorMode.preference = value;
      }
    };
    (0,__vite_ssr_import_4__.useHead)({ htmlAttrs });
  };
  (0,__vite_ssr_import_6__.useRouter)().afterEach((to) => {
    const forcedColorMode = __vite_ssr_import_3__.isVue2 ? to.matched[0]?.components.default?.options?.colorMode : to.meta.colorMode;
    if (forcedColorMode && forcedColorMode !== "system") {
      colorMode.value = htmlAttrs["data-color-mode-forced"] = forcedColorMode;
      if (__vite_ssr_import_1__.dataValue) {
        htmlAttrs[`data-${__vite_ssr_import_1__.dataValue}`] = colorMode.value;
      };
      colorMode.forced = true;
    } else if (forcedColorMode === "system") {
      console.warn("You cannot force the colorMode to system at the page level.");
    }
  });
  nuxtApp.provide("colorMode", colorMode);
});

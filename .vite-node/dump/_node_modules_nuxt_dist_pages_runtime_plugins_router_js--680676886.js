// /node_modules/nuxt/dist/pages/runtime/plugins/router.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("/node_modules/unctx/dist/index.mjs", {"importedNames":["executeAsync"]});const __vite_ssr_import_1__ = await __vite_ssr_import__("vue", {"importedNames":["isReadonly","reactive","shallowReactive","shallowRef"]});const __vite_ssr_import_2__ = await __vite_ssr_import__("vue-router", {"importedNames":["START_LOCATION","createMemoryHistory","createRouter","createWebHashHistory","createWebHistory"]});const __vite_ssr_import_3__ = await __vite_ssr_import__("h3", {"importedNames":["createError"]});const __vite_ssr_import_4__ = await __vite_ssr_import__("ufo", {"importedNames":["isEqual","withoutBase"]});const __vite_ssr_import_5__ = await __vite_ssr_import__("/node_modules/nuxt/dist/pages/runtime/utils.js", {"importedNames":["toArray"]});const __vite_ssr_import_6__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/manifest.js", {"importedNames":["getRouteRules"]});const __vite_ssr_import_7__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["defineNuxtPlugin","useRuntimeConfig"]});const __vite_ssr_import_8__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/error.js", {"importedNames":["clearError","showError","useError"]});const __vite_ssr_import_9__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/router.js", {"importedNames":["navigateTo"]});const __vite_ssr_import_10__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fnuxt.config.mjs", {"importedNames":["appManifest"]});const __vite_ssr_import_11__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Froutes.mjs", {"importedNames":["default","handleHotUpdate"]});const __vite_ssr_import_12__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Frouter.options.mjs", {"importedNames":["default","hashMode"]});const __vite_ssr_import_13__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fmiddleware.mjs", {"importedNames":["globalMiddleware","namedMiddleware"]});/* _processed_nuxt_unctx_transform */













function createCurrentLocation(base, location, renderedPath) {
  const { pathname, search, hash } = location;
  const hashPos = base.indexOf("#");
  if (hashPos > -1) {
    const slicePos = hash.includes(base.slice(hashPos)) ? base.slice(hashPos).length : 1;
    let pathFromHash = hash.slice(slicePos);
    if (pathFromHash[0] !== "/") {
      pathFromHash = "/" + pathFromHash;
    };
    return (0,__vite_ssr_import_4__.withoutBase)(pathFromHash, "");
  };
  const displayedPath = (0,__vite_ssr_import_4__.withoutBase)(pathname, base);
  const path = !renderedPath || (0,__vite_ssr_import_4__.isEqual)(displayedPath, renderedPath, { trailingSlash: true }) ? displayedPath : renderedPath;
  return path + (path.includes("?") ? "" : search) + hash;
}
const plugin = (0,__vite_ssr_import_7__.defineNuxtPlugin)({
  name: "nuxt:router",
  enforce: "pre",
  async setup(nuxtApp) {let __temp, __restore;
    let routerBase = (0,__vite_ssr_import_7__.useRuntimeConfig)().app.baseURL;
    if (__vite_ssr_import_12__.hashMode && !routerBase.includes("#")) {
      routerBase += "#";
    };
    const history = __vite_ssr_import_12__.default.history?.(routerBase) ?? (false ? __vite_ssr_import_12__.hashMode ? (0,__vite_ssr_import_2__.createWebHashHistory)(routerBase) : (0,__vite_ssr_import_2__.createWebHistory)(routerBase) : (0,__vite_ssr_import_2__.createMemoryHistory)(routerBase));
    const routes = __vite_ssr_import_12__.default.routes ? (([__temp,__restore]=(0,__vite_ssr_import_0__.executeAsync)(()=>__vite_ssr_import_12__.default.routes((0,__vite_ssr_import_11__.default)))),__temp=await __temp,__restore(),__temp) ?? __vite_ssr_import_11__.default : __vite_ssr_import_11__.default;
    let startPosition;
    const router = (0,__vite_ssr_import_2__.createRouter)({
      ...__vite_ssr_import_12__.default,
      scrollBehavior: (to, from, savedPosition) => {
        if (from === __vite_ssr_import_2__.START_LOCATION) {
          startPosition = savedPosition;
          return;
        };
        if (__vite_ssr_import_12__.default.scrollBehavior) {
          router.options.scrollBehavior = __vite_ssr_import_12__.default.scrollBehavior;
          if ("scrollRestoration" in (void 0).history) {
            const unsub = router.beforeEach(() => {
              unsub();
              (void 0).history.scrollRestoration = "manual";
            });
          };
          return __vite_ssr_import_12__.default.scrollBehavior(to, (0,__vite_ssr_import_2__.START_LOCATION), startPosition || savedPosition);
        }
      },
      history,
      routes
    });
    (0,__vite_ssr_import_11__.handleHotUpdate)(router, __vite_ssr_import_12__.default.routes ? __vite_ssr_import_12__.default.routes : (routes2) => routes2);
    if (false) {
      (void 0).history.scrollRestoration = "auto";
    };
    nuxtApp.vueApp.use(router);
    const previousRoute = (0,__vite_ssr_import_1__.shallowRef)(router.currentRoute.value);
    router.afterEach((_to, from) => {
      previousRoute.value = from;
    });
    Object.defineProperty(nuxtApp.vueApp.config.globalProperties, "previousRoute", {
      get: () => previousRoute.value
    });
    const initialURL = true ? nuxtApp.ssrContext.url : createCurrentLocation(routerBase, (void 0).location, nuxtApp.payload.path);
    const _route = (0,__vite_ssr_import_1__.shallowRef)(router.currentRoute.value);
    const syncCurrentRoute = () => {
      _route.value = router.currentRoute.value;
    };
    nuxtApp.hook("page:finish", syncCurrentRoute);
    router.afterEach((to, from) => {
      if (to.matched[0]?.components?.default === from.matched[0]?.components?.default) {
        syncCurrentRoute();
      }
    });
    const route = {};
    for (const key in _route.value) {
      Object.defineProperty(route, key, {
        get: () => _route.value[key],
        enumerable: true
      });
    };
    nuxtApp._route = (0,__vite_ssr_import_1__.shallowReactive)(route);
    nuxtApp._middleware = nuxtApp._middleware || {
      global: [],
      named: {}
    };
    const error = (0,__vite_ssr_import_8__.useError)();
    if (!nuxtApp.ssrContext?.islandContext) {
      router.afterEach(async (to, _from, failure) => {
        delete nuxtApp._processingMiddleware;
        if (false) {
          await nuxtApp.runWithContext((0,__vite_ssr_import_8__.clearError));
        };
        if (failure) {
          await nuxtApp.callHook("page:loading:end");
        };
        if (failure?.type === 4) {
          return;
        };
        if (to.redirectedFrom && to.fullPath !== initialURL) {
          await nuxtApp.runWithContext(() => (0,__vite_ssr_import_9__.navigateTo)(to.fullPath || "/"));
        }
      });
    };
    try {
      if (true) {
        ;(([__temp,__restore]=(0,__vite_ssr_import_0__.executeAsync)(()=>router.push(initialURL))),await __temp,__restore());;
      };
      ;(([__temp,__restore]=(0,__vite_ssr_import_0__.executeAsync)(()=>router.isReady())),await __temp,__restore());;
    } catch (error2) {
      ;(([__temp,__restore]=(0,__vite_ssr_import_0__.executeAsync)(()=>nuxtApp.runWithContext(() => (0,__vite_ssr_import_8__.showError)(error2)))),await __temp,__restore());;
    };
    const resolvedInitialRoute = false ? router.resolve(initialURL) : router.currentRoute.value;
    syncCurrentRoute();
    if (nuxtApp.ssrContext?.islandContext) {
      return { provide: { router } };
    };
    const initialLayout = nuxtApp.payload.state._layout;
    router.beforeEach(async (to, from) => {
      await nuxtApp.callHook("page:loading:start");
      to.meta = (0,__vite_ssr_import_1__.reactive)(to.meta);
      if (nuxtApp.isHydrating && initialLayout && !(0,__vite_ssr_import_1__.isReadonly)(to.meta.layout)) {
        to.meta.layout = initialLayout;
      };
      nuxtApp._processingMiddleware = true;
      if (!nuxtApp.ssrContext?.islandContext) {
        const middlewareEntries = /* @__PURE__ */ new Set([...__vite_ssr_import_13__.globalMiddleware, ...nuxtApp._middleware.global]);
        for (const component of to.matched) {
          const componentMiddleware = component.meta.middleware;
          if (!componentMiddleware) {
            continue;
          };
          for (const entry of (0,__vite_ssr_import_5__.toArray)(componentMiddleware)) {
            middlewareEntries.add(entry);
          }
        };
        if (__vite_ssr_import_10__.appManifest) {
          const routeRules = await nuxtApp.runWithContext(() => (0,__vite_ssr_import_6__.getRouteRules)({ path: to.path }));
          if (routeRules.appMiddleware) {
            for (const key in routeRules.appMiddleware) {
              if (routeRules.appMiddleware[key]) {
                middlewareEntries.add(key);
              } else {
                middlewareEntries.delete(key);
              }
            }
          }
        };
        for (const entry of middlewareEntries) {
          const middleware = typeof entry === "string" ? nuxtApp._middleware.named[entry] || await __vite_ssr_import_13__.namedMiddleware[entry]?.().then((r) => r.default || r) : entry;
          if (!middleware) {
            if (true) {
              throw new Error(`Unknown route middleware: '${entry}'. Valid middleware: ${Object.keys((0,__vite_ssr_import_13__.namedMiddleware)).map((mw) => `'${mw}'`).join(", ")}.`);
            };
            throw new Error(`Unknown route middleware: '${entry}'.`);
          };
          const result = await nuxtApp.runWithContext(() => middleware(to, from));
          if (true) {
            if (result === false || result instanceof Error) {
              const error2 = result || (0,__vite_ssr_import_3__.createError)({
                statusCode: 404,
                statusMessage: `Page Not Found: ${initialURL}`
              });
              await nuxtApp.runWithContext(() => (0,__vite_ssr_import_8__.showError)(error2));
              return false;
            }
          };
          if (result === true) {
            continue;
          };
          if (result || result === false) {
            return result;
          }
        }
      }
    });
    router.onError(async () => {
      delete nuxtApp._processingMiddleware;
      await nuxtApp.callHook("page:loading:end");
    });
    router.afterEach(async (to, _from) => {
      if (to.matched.length === 0) {
        await nuxtApp.runWithContext(() => (0,__vite_ssr_import_8__.showError)((0,__vite_ssr_import_3__.createError)({
          statusCode: 404,
          fatal: false,
          statusMessage: `Page not found: ${to.fullPath}`,
          data: {
            path: to.fullPath
          }
        })));
      }
    });
    nuxtApp.hooks.hookOnce("app:created", async () => {
      try {
        if ("name" in resolvedInitialRoute) {
          resolvedInitialRoute.name = void 0;
        };
        await router.replace({
          ...resolvedInitialRoute,
          force: true
        });
        router.options.scrollBehavior = __vite_ssr_import_12__.default.scrollBehavior;
      } catch (error2) {
        await nuxtApp.runWithContext(() => (0,__vite_ssr_import_8__.showError)(error2));
      }
    });
    return { provide: { router } };
  }
},1);
__vite_ssr_exports__.default = plugin;

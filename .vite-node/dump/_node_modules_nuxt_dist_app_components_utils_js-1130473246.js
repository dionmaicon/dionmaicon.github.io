// /node_modules/nuxt/dist/app/components/utils.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("vue", {"importedNames":["Transition","createStaticVNode","h"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("@vue/shared", {"importedNames":["isString","isPromise","isArray","isObject"]});
const __vite_ssr_import_2__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fpages.mjs", {"importedNames":["START_LOCATION"]});
const _wrapInTransition = (props, children) => {
  return { default: () => false && props ? (0,__vite_ssr_import_0__.h)((0,__vite_ssr_import_0__.Transition), props === true ? {} : props, children) : children.default?.() };
};
Object.defineProperty(__vite_ssr_exports__, "_wrapInTransition", { enumerable: true, configurable: true, get(){ return _wrapInTransition }});
const ROUTE_KEY_PARENTHESES_RE = /(:\w+)\([^)]+\)/g;
const ROUTE_KEY_SYMBOLS_RE = /(:\w+)[?+*]/g;
const ROUTE_KEY_NORMAL_RE = /:\w+/g;
function generateRouteKey(route) {
  const source = route?.meta.key ?? route.path.replace(ROUTE_KEY_PARENTHESES_RE, "$1").replace(ROUTE_KEY_SYMBOLS_RE, "$1").replace(ROUTE_KEY_NORMAL_RE, (r) => route.params[r.slice(1)]?.toString() || "");
  return typeof source === "function" ? source(route) : source;
}
function isChangingPage(to, from) {
  if (to === from || from === __vite_ssr_import_2__.START_LOCATION) {
    return false;
  };
  if (generateRouteKey(to) !== generateRouteKey(from)) {
    return true;
  };
  const areComponentsSame = to.matched.every(
    (comp, index) => comp.components && comp.components.default === from.matched[index]?.components?.default
  );
  if (areComponentsSame) {
    return false;
  };
  return true;
}
Object.defineProperty(__vite_ssr_exports__, "isChangingPage", { enumerable: true, configurable: true, get(){ return isChangingPage }});;
function createBuffer() {
  let appendable = false;
  const buffer = [];
  return {
    getBuffer() {
      return buffer;
    },
    push(item) {
      const isStringItem = (0,__vite_ssr_import_1__.isString)(item);
      if (appendable && isStringItem) {
        buffer[buffer.length - 1] += item;
      } else {
        buffer.push(item);
      };
      appendable = isStringItem;
      if ((0,__vite_ssr_import_1__.isPromise)(item) || (0,__vite_ssr_import_1__.isArray)(item) && item.hasAsync) {
        buffer.hasAsync = true;
      }
    }
  };
}
Object.defineProperty(__vite_ssr_exports__, "createBuffer", { enumerable: true, configurable: true, get(){ return createBuffer }});;
function vforToArray(source) {
  if ((0,__vite_ssr_import_1__.isArray)(source)) {
    return source;
  } else if ((0,__vite_ssr_import_1__.isString)(source)) {
    return source.split("");
  } else if (typeof source === "number") {
    if (true && !Number.isInteger(source)) {
      console.warn(`The v-for range expect an integer value but got ${source}.`);
    };
    const array = [];
    for (let i = 0; i < source; i++) {
      array[i] = i;
    };
    return array;
  } else if ((0,__vite_ssr_import_1__.isObject)(source)) {
    if (source[Symbol.iterator]) {
      return Array.from(
        source,
        (item) => item
      );
    } else {
      const keys = Object.keys(source);
      const array = new Array(keys.length);
      for (let i = 0, l = keys.length; i < l; i++) {
        const key = keys[i];
        array[i] = source[key];
      };
      return array;
    }
  };
  return [];
}
Object.defineProperty(__vite_ssr_exports__, "vforToArray", { enumerable: true, configurable: true, get(){ return vforToArray }});;
function getFragmentHTML(element, withoutSlots = false) {
  if (element) {
    if (element.nodeName === "#comment" && element.nodeValue === "[") {
      return getFragmentChildren(element, [], withoutSlots);
    };
    if (withoutSlots) {
      const clone = element.cloneNode(true);
      clone.querySelectorAll("[data-island-slot]").forEach((n) => {
        n.innerHTML = "";
      });
      return [clone.outerHTML];
    };
    return [element.outerHTML];
  }
}
Object.defineProperty(__vite_ssr_exports__, "getFragmentHTML", { enumerable: true, configurable: true, get(){ return getFragmentHTML }});;
function getFragmentChildren(element, blocks = [], withoutSlots = false) {
  if (element && element.nodeName) {
    if (isEndFragment(element)) {
      return blocks;
    } else if (!isStartFragment(element)) {
      const clone = element.cloneNode(true);
      if (withoutSlots) {
        clone.querySelectorAll("[data-island-slot]").forEach((n) => {
          n.innerHTML = "";
        });
      };
      blocks.push(clone.outerHTML);
    };
    getFragmentChildren(element.nextSibling, blocks, withoutSlots);
  };
  return blocks;
}
function elToStaticVNode(el, staticNodeFallback) {
  const fragment = el ? getFragmentHTML(el) : staticNodeFallback ? [staticNodeFallback] : void 0;
  if (fragment) {
    return (0,__vite_ssr_import_0__.createStaticVNode)(fragment.join(""), fragment.length);
  };
  return (0,__vite_ssr_import_0__.h)("div");
}
Object.defineProperty(__vite_ssr_exports__, "elToStaticVNode", { enumerable: true, configurable: true, get(){ return elToStaticVNode }});;
function isStartFragment(element) {
  return element.nodeName === "#comment" && element.nodeValue === "[";
}
function isEndFragment(element) {
  return element.nodeName === "#comment" && element.nodeValue === "]";
}

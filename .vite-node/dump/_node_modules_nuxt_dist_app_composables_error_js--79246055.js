// /node_modules/nuxt/dist/app/composables/error.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("h3", {"importedNames":["createError"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("vue", {"importedNames":["toRef"]});
const __vite_ssr_import_2__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["useNuxtApp"]});
const __vite_ssr_import_3__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/router.js", {"importedNames":["useRouter"]});
const __vite_ssr_import_4__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fnuxt.config.mjs", {"importedNames":["nuxtDefaultErrorValue"]});
const NUXT_ERROR_SIGNATURE = "__nuxt_error";
Object.defineProperty(__vite_ssr_exports__, "NUXT_ERROR_SIGNATURE", { enumerable: true, configurable: true, get(){ return NUXT_ERROR_SIGNATURE }});
const useError = () => (0,__vite_ssr_import_1__.toRef)((0,__vite_ssr_import_2__.useNuxtApp)().payload, "error");
Object.defineProperty(__vite_ssr_exports__, "useError", { enumerable: true, configurable: true, get(){ return useError }});
const showError = (error) => {
  const nuxtError = createError(error);
  try {
    const nuxtApp = (0,__vite_ssr_import_2__.useNuxtApp)();
    const error2 = useError();
    if (false) {
      nuxtApp.hooks.callHook("app:error", nuxtError);
    };
    error2.value = error2.value || nuxtError;
  } catch {
    throw nuxtError;
  };
  return nuxtError;
};
Object.defineProperty(__vite_ssr_exports__, "showError", { enumerable: true, configurable: true, get(){ return showError }});
const clearError = async (options = {}) => {
  const nuxtApp = (0,__vite_ssr_import_2__.useNuxtApp)();
  const error = useError();
  nuxtApp.callHook("app:error:cleared", options);
  if (options.redirect) {
    await (0,__vite_ssr_import_3__.useRouter)().replace(options.redirect);
  };
  error.value = __vite_ssr_import_4__.nuxtDefaultErrorValue;
};
Object.defineProperty(__vite_ssr_exports__, "clearError", { enumerable: true, configurable: true, get(){ return clearError }});
const isNuxtError = (error) => !!error && typeof error === "object" && NUXT_ERROR_SIGNATURE in error;
Object.defineProperty(__vite_ssr_exports__, "isNuxtError", { enumerable: true, configurable: true, get(){ return isNuxtError }});
const createError = (error) => {
  const nuxtError = (0,__vite_ssr_import_0__.createError)(error);
  Object.defineProperty(nuxtError, NUXT_ERROR_SIGNATURE, {
    value: true,
    configurable: false,
    writable: false
  });
  return nuxtError;
};
Object.defineProperty(__vite_ssr_exports__, "createError", { enumerable: true, configurable: true, get(){ return createError }});

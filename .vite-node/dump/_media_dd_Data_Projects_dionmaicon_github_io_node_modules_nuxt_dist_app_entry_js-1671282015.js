// /media/dd/Data/Projects/dionmaicon.github.io/node_modules/nuxt/dist/app/entry.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("vue", {"importedNames":["createApp","createSSRApp","nextTick"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Ffetch.mjs");
const __vite_ssr_import_2__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/nuxt.js", {"importedNames":["applyPlugins","createNuxtApp"]});
const __vite_ssr_import_3__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/composables/error.js", {"importedNames":["createError"]});
const __vite_ssr_import_4__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fcss.mjs");
const __vite_ssr_import_5__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fplugins.server.mjs", {"importedNames":["default"]});
const __vite_ssr_import_6__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Froot-component.mjs", {"importedNames":["default"]});
const __vite_ssr_import_7__ = await __vite_ssr_import__("/@id/virtual:nuxt:%2Fmedia%2Fdd%2FData%2FProjects%2Fdionmaicon.github.io%2F.nuxt%2Fnuxt.config.mjs", {"importedNames":["appId","appSpaLoaderAttrs","multiApp","spaLoadingTemplateOutside","vueAppRootContainer"]});const __vite_ssr_import_8__ = await __vite_ssr_import__("/node_modules/vite-plugin-vue-inspector/src/load.js");
let entry;
if (true) {
  entry = async function createNuxtAppServer(ssrContext) {
    const vueApp = (0,__vite_ssr_import_0__.createApp)((0,__vite_ssr_import_6__.default));
    const nuxt = (0,__vite_ssr_import_2__.createNuxtApp)({ vueApp, ssrContext });
    try {
      await (0,__vite_ssr_import_2__.applyPlugins)(nuxt, (0,__vite_ssr_import_5__.default));
      await nuxt.hooks.callHook("app:created", vueApp);
    } catch (error) {
      await nuxt.hooks.callHook("app:error", error);
      nuxt.payload.error = nuxt.payload.error || (0,__vite_ssr_import_3__.createError)(error);
    };
    if (ssrContext?._renderResponse) {
      throw new Error("skipping render");
    };
    return vueApp;
  };
};
if (false) {
  if (__vite_ssr_import_meta__.webpackHot) {
    __vite_ssr_import_meta__.webpackHot.accept();
  };
  let vueAppPromise;
  entry = async function initApp() {
    if (vueAppPromise) {
      return vueAppPromise;
    };
    const isSSR = Boolean(
      (__vite_ssr_import_7__.multiApp ? (void 0).__NUXT__?.[__vite_ssr_import_7__.appId] : (void 0).__NUXT__)?.serverRendered ?? (__vite_ssr_import_7__.multiApp ? (void 0).querySelector(`[data-nuxt-data="${__vite_ssr_import_7__.appId}"]`) : (void 0).getElementById("__NUXT_DATA__"))?.dataset.ssr === "true"
    );
    const vueApp = isSSR ? (0,__vite_ssr_import_0__.createSSRApp)((0,__vite_ssr_import_6__.default)) : (0,__vite_ssr_import_0__.createApp)((0,__vite_ssr_import_6__.default));
    const nuxt = (0,__vite_ssr_import_2__.createNuxtApp)({ vueApp });
    async function handleVueError(error) {
      await nuxt.callHook("app:error", error);
      nuxt.payload.error = nuxt.payload.error || (0,__vite_ssr_import_3__.createError)(error);
    }
    vueApp.config.errorHandler = handleVueError;
    nuxt.hook("app:suspense:resolve", () => {
      if (vueApp.config.errorHandler === handleVueError) {
        vueApp.config.errorHandler = void 0;
      }
    });
    if (__vite_ssr_import_7__.spaLoadingTemplateOutside && !isSSR && __vite_ssr_import_7__.appSpaLoaderAttrs.id) {
      nuxt.hook("app:suspense:resolve", () => {
        (void 0).getElementById(__vite_ssr_import_7__.appSpaLoaderAttrs.id)?.remove();
      });
    };
    try {
      await (0,__vite_ssr_import_2__.applyPlugins)(nuxt, (0,__vite_ssr_import_5__.default));
    } catch (err) {
      handleVueError(err);
    };
    try {
      await nuxt.hooks.callHook("app:created", vueApp);
      await nuxt.hooks.callHook("app:beforeMount", vueApp);
      vueApp.mount((0,__vite_ssr_import_7__.vueAppRootContainer));
      await nuxt.hooks.callHook("app:mounted", vueApp);
      await (0,__vite_ssr_import_0__.nextTick)();
    } catch (err) {
      handleVueError(err);
    };
    return vueApp;
  };
  vueAppPromise = entry().catch((error) => {
    console.error("Error while mounting app:", error);
    throw error;
  });
};
__vite_ssr_exports__.default = (ssrContext) => entry(ssrContext);


// /node_modules/nuxt/dist/app/components/route-provider.js
const __vite_ssr_import_0__ = await __vite_ssr_import__("vue", {"importedNames":["defineComponent","h","nextTick","onMounted","provide","shallowReactive"]});
const __vite_ssr_import_1__ = await __vite_ssr_import__("/node_modules/nuxt/dist/app/components/injections.js", {"importedNames":["PageRouteSymbol"]});
const RouteProvider = (0,__vite_ssr_import_0__.defineComponent)({
  props: {
    vnode: {
      type: Object,
      required: true
    },
    route: {
      type: Object,
      required: true
    },
    vnodeRef: Object,
    renderKey: String,
    trackRootNodes: Boolean
  },
  setup(props) {
    const previousKey = props.renderKey;
    const previousRoute = props.route;
    const route = {};
    for (const key in props.route) {
      Object.defineProperty(route, key, {
        get: () => previousKey === props.renderKey ? props.route[key] : previousRoute[key],
        enumerable: true
      });
    };
    (0,__vite_ssr_import_0__.provide)((0,__vite_ssr_import_1__.PageRouteSymbol), (0,__vite_ssr_import_0__.shallowReactive)(route));
    let vnode;
    if (true && false && props.trackRootNodes) {
      (0,__vite_ssr_import_0__.onMounted)(() => {
        (0,__vite_ssr_import_0__.nextTick)(() => {
          if (["#comment", "#text"].includes(vnode?.el?.nodeName)) {
            const filename = (vnode?.type).__file;
            console.warn(`[nuxt] \`${filename}\` does not have a single root node and will cause errors when navigating between routes.`);
          }
        });
      });
    };
    return () => {
      if (true && false) {
        vnode = (0,__vite_ssr_import_0__.h)(props.vnode, { ref: props.vnodeRef });
        return vnode;
      };
      return (0,__vite_ssr_import_0__.h)(props.vnode, { ref: props.vnodeRef });
    };
  }
});
Object.defineProperty(__vite_ssr_exports__, "RouteProvider", { enumerable: true, configurable: true, get(){ return RouteProvider }});
